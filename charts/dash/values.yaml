nameOverride: dash

labels: {}
annotations: {}

redis:
  enabled: true
  auth:
    existingSecret: dash-db
    existingSecretPasswordKey: redis-password
  master:
    persistence:
      enabled: true
      size: 10Gi

image:
  pullSecrets: []
  pullPolicy: IfNotPresent
  repository: registry.hub.docker.com
  image: null # No official Docker image (required)
  tag: null   # No official Docker image (required)

pvc:
  claims: {}
  mounts: {}

deployment:
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate

  priorityClassName: ""
  affinity: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  nodeSelector: {}
  tolerations: []
  resources:
    requests:
      cpu: "100m"
      memory: "100Mi"
    limits: {}

  env:
    REDIS_HOST: '{{ include "dash.redisMaster.fullname" . }}'
    REDIS_PORT: 6379

  config:
    - global
  secrets:
    - global

  protocol: HTTP
  port: 80

  livenessProbe:
    endpoint: "/status"
    failureThreshold: 1
    initialDelaySeconds: 60
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 3

  readinessProbe:
    endpoint: "/status"
    failureThreshold: 1
    initialDelaySeconds: 90
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 3

autoscaling:
  minReplicas: 1
  maxReplicas: 4
  avgCpuUtilization: 70

service:
  type: ClusterIP
  protocol: http
  port: 80

ingress:
  className: ''
  hosts: []
  tls: []

services:
  gateway:
    autoscaling:
      enabled: true

    service:
      enabled: true
    ingress:
      enabled: false
      # hosts:
      #   - host: "${domain}"
      #   - host: "www.${domain}"
      # tls:
      #   - secretName: origin-cert
