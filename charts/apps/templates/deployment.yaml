apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "apps.fullname" . }}
  labels:
    {{- include "apps.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "apps.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "apps.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "apps.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.redisWait.enabled }}
        - name: wait-for-redis
          image: {{ include "common.images.image" (dict "imageRoot" .Values.redis.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.redis.image.pullPolicy | quote }}
          {{- with .Values.redisWait.securityContext }}
          securityContext: {{ . | toYaml }}
          {{- end }}
          command:
            - /bin/bash
          args:
            - -ec
            - |
                #!/bin/bash
                set -o errexit
                set -o nounset
                set -o pipefail
                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh
                check_redis_connection() {
                  local result="$(redis-cli -h {{ include "apps.redisHost" . }} -p {{ include "apps.redisPort" . }} {{ .Values.redisWait.extraArgs }} PING)"
                  if [[ "$result" != "PONG" ]]; then
                    false
                  fi
                }
                info "Checking redis connection..."
                if ! retry_while "check_redis_connection"; then
                    error "Could not connect to the Redis server"
                    return 1
                else
                    info "Connected to the Redis instance"
                fi
          {{- if include "apps.redis.auth.enabled" . }}
          env:
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: {{ include "apps.redis.secretName" . }}
                  key: {{ include "apps.redis.secretPasswordKey" . }}
          {{- end }}
          {{- end }}
          {{- if and .Values.redis.enabled (include "apps.redis.auth.enabled" .) }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "apps.redis.secretName" . }}
                  key: {{ include "apps.redis.secretPasswordKey" . }}
          {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.containerPort }}
              protocol: TCP
          env:
            - name: REDIS_HOST
              value: {{ include "apps.redisHost" . | quote }}
            - name: REDIS_PORT
              value: {{ include "apps.redisPort" . | quote }}
            {{- if and (not .Values.externalRedis.password) (include "apps.redis.auth.enabled" .) }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "apps.redis.secretName" . }}
                  key: {{ include "apps.redis.secretPasswordKey" . }}
            {{- else }}
            - name: REDIS_PASSWORD
              value: {{ .Values.externalRedis.password }}
            {{- end }}
            - name: APP_DEV_PORT
              value: {{ .Values.app.dev.port | quote }}
            - name: APP_DEV_PROCESSES
              value: {{ .Values.app.dev.processes | quote }}
            - name: APP_DEV_WATCH_INTERVAL
              value: {{ .Values.app.dev.watchInterval | quote }}
            - name: APP_HOST_PORT
              value: {{ .Values.app.hostPort | quote }}
            - name: APP_TITLE
              value: {{ .Values.app.title | quote }}
            - name: STORAGE_BASE_URL
              value: {{ .Values.app.storage.baseURL | quote }}
            - name: STORAGE_DATA_BUCKET
              value: {{ .Values.app.storage.dataBucket | quote }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- if .Values.extraVolumeMounts }}
          volumeMounts:
          {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.extraVolumes }}
      volumes:
      {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
      {{- end }}
